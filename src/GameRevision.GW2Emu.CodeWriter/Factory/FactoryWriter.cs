using System;
using GameRevision.GW2Emu.CodeWriter.CSharp;
using GameRevision.GW2Emu.CodeWriter.Headers;
using GameRevision.GW2Emu.CodeWriter.Xml;

namespace GameRevision.GW2Emu.CodeWriter.Factory
{
    public class FactoryWriter
    {
        private CSharpWriter writer;
        private CommunicationDirection protocol;
        private HeaderEnum headerEnum;
        private DateTime date;

        public FactoryWriter(CSharpWriter writer, CommunicationDirection protocol, HeaderEnum headerEnum, DateTime date)
        {
            this.writer = writer;
            this.protocol = protocol;
            this.headerEnum = headerEnum;
            this.date = date;
        }

        public void WriteFactory()
        {
            this.WriteComment();
            this.writer.WriteLine();
            this.WriteUsing();
            this.writer.WriteLine();
            this.WriteNamespace();
        }

        private void WriteComment()
        {
            this.writer.WriteMultilineComment("This code was autogenerated by",
                                              "GameRevision.GW2Emu.CodeWriter.",
                                              "Date generated: " + this.date.ToString("dd-MM-yy"));
        }

        private void WriteUsing()
        {
            string serverName = this.protocol.type.GetServerName().ToString();
            this.writer.WriteUsing("System");
            this.writer.WriteUsing("GameRevision.GW2Emu.Core");
            this.writer.WriteUsing("GameRevision.GW2Emu.Messages." + serverName + ".CtoS");
        }

        private void WriteNamespace()
        {
            string serverName = this.protocol.type.GetServerName().ToString();
            this.writer.WriteNamespace("Messages." + serverName);
            this.writer.WriteInBlock(this.WriteClass);
        }

        private void WriteClass()
        {
            string className = protocol.type.GetServerName().ToString().Replace("Server", string.Empty) + "MessageFactory";
            this.writer.WriteClass(className, "IMessageFactory");
            this.writer.WriteInBlock(this.WriteMethod);
        }

        private void WriteMethod()
        {
            this.writer.WriteMethod("ITriggerableMessage", "CreateMessage", "ushort header");
            this.writer.WriteInBlock(this.WriteSwitch);
        }

        private void WriteSwitch()
        {
            this.writer.WriteSwitch("header");
            this.writer.WriteInBlock(this.WriteCases);
        }

        private void WriteCases()
        {
            foreach (PacketType message in this.protocol.Packet)
            {
                this.writer.WriteCase(message.header, delegate
                {
                    this.writer.WriteReturn("new " + this.headerEnum.NamesByHeader[message.header] + "()");
                });
            }

            this.writer.WriteDefault(delegate
            {
                this.writer.WriteThrowException("NotImplementedException");
            });
        }
    }
}
