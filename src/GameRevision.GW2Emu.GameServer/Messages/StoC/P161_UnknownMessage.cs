/*
 * This code was autogenerated by
 * GameRevision.GW2Emu.CodeWriter.
 * Date generated: 21-07-13
 */

using System;
using System.IO;
using System.Net;
using GameRevision.GW2Emu.Common;
using GameRevision.GW2Emu.Common.Math;
using GameRevision.GW2Emu.Common.Messaging;
using GameRevision.GW2Emu.Common.Serialization;

namespace GameRevision.GW2Emu.GameServer.Messages.StoC
{
    public class P161_UnknownMessage : IMessage
    {
        public int Unknown0;
        public string Unknown1;
        public byte Unknown2;
        public struct Struct3
        {
            public long Unknown4;
            public long Unknown5;
            public long Unknown6;
            
            public void Serialize(Serializer serializer)
            {
                serializer.Write(this.Unknown4);
                serializer.Write(this.Unknown5);
                serializer.Write(this.Unknown6);
            }
            public void Deserialize(Deserializer deserializer) {}
        }
        public Optional<Struct3> Unknown7;
        public struct Struct8
        {
            public float Unknown9;
            public int Unknown10;
            public int Unknown11;
            public float Unknown12;
            
            public void Serialize(Serializer serializer)
            {
                serializer.Write(this.Unknown9);
                serializer.WriteVarint(this.Unknown10);
                serializer.WriteVarint(this.Unknown11);
                serializer.Write(this.Unknown12);
            }
            public void Deserialize(Deserializer deserializer) {}
        }
        public Optional<Struct8> Unknown13;
        
        public ushort Header
        {
            get
            {
                return 161;
            }
        }
        
        public void Serialize(Serializer serializer)
        {
            serializer.Write(Header);
            serializer.WriteVarint(this.Unknown0);
            serializer.WriteUtf16String(this.Unknown1);
            serializer.Write(this.Unknown2);
            serializer.Write(this.Unknown7.IsPresent ? (byte) 1 : (byte) 0);
            if (this.Unknown7.IsPresent)
            {
                this.Unknown7.Value.Serialize(serializer);
            }
            serializer.Write(this.Unknown13.IsPresent ? (byte) 1 : (byte) 0);
            if (this.Unknown13.IsPresent)
            {
                this.Unknown13.Value.Serialize(serializer);
            }
        }
        public void Deserialize(Deserializer deserializer) {}
    }
}
